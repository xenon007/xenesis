package templates

import (
	"fmt"
	"path/filepath"
	"strings"
)

const (
	// MDConsoleInit –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –±–ª–æ–∫ –∫–æ–¥–∞ –≤ README.md.
	MDConsoleInit = "```console"
)

// File –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç–µ.
type File struct {
	Path    string
	Content string
}

// Template –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±—É–¥—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.
type Template struct {
	Key              string
	Title            string
	Description      string
	MandatoryFolders []string
	OptionalFolders  map[string]string
	MainFileName     func(projectName string) string
	MainFileContent  func(projectName, modulePath string) string
	ExtraFiles       func(projectName, modulePath string) []File
	ReadmeContent    func(projectName, description, githubHandle string) string
}

// All –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤.
func All() []Template {
	return []Template{
		basicTemplate(),
		x07ComponentTemplate(),
		threeXfaTemplate(),
	}
}

// Default –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —à–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
func Default() Template {
	return basicTemplate()
}

// SanitizePackageName –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞ –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è –ø–∞–∫–µ—Ç–∞.
func SanitizePackageName(projectName string) string {
	sanitized := strings.ToLower(projectName)
	replacer := strings.NewReplacer("-", "_", " ", "")
	sanitized = replacer.Replace(sanitized)
	return sanitized
}

func basicTemplate() Template {
	return Template{
		Key:         "basic",
		Title:       "–ë–∞–∑–æ–≤—ã–π Go-–ø—Ä–æ–µ–∫—Ç",
		Description: "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–∞—Ä–∫–∞—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –Ω–∞–±–æ—Ä–æ–º –ø–æ–ª–µ–∑–Ω—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–æ–≤",
		MandatoryFolders: []string{
			"cmd",
			"pkg",
			"docs",
			"internal",
			"examples",
		},
		OptionalFolders: map[string]string{
			"api":     "–ù—É–∂–Ω—ã –ª–∏ API?",
			"server":  "–ù—É–∂–µ–Ω –ª–∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä?",
			"db":      "–ü–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î?",
			"scripts": "–°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è —Å–∫—Ä–∏–ø—Ç–æ–≤?",
			"test":    "–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ?",
			"init":    "–ù—É–∂–Ω—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤?",
			"assets":  "–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è –∞—Å—Å–µ—Ç–æ–≤?",
		},
		MainFileName: func(projectName string) string {
			return filepath.Join("cmd", fmt.Sprintf("%s.go", projectName))
		},
		MainFileContent: func(projectName, modulePath string) string {
			return "package main\n\n" +
				"import (\n" +
				"\t\"fmt\"\n" +
				")\n\n" +
				"func main() {\n" +
				"\tfmt.Println(\"Hello, World!\")\n" +
				"}\n"
		},
		ExtraFiles: func(projectName, modulePath string) []File {
			return nil
		},
		ReadmeContent: func(projectName, description, githubHandle string) string {
			builder := strings.Builder{}
			builder.WriteString("# ")
			builder.WriteString(projectName)
			builder.WriteString("\n")
			builder.WriteString(description)
			builder.WriteString("\n\nInstallation üì°\n")
			builder.WriteString("-------\n")
			builder.WriteString("**Go 1.17+**\n")
			builder.WriteString(MDConsoleInit + "\n")
			builder.WriteString("go install -v github.com/")
			builder.WriteString(githubHandle)
			builder.WriteString("/")
			builder.WriteString(projectName)
			builder.WriteString("/cmd/")
			builder.WriteString(projectName)
			builder.WriteString("@latest\n")
			builder.WriteString("```\n")
			builder.WriteString("**otherwise**\n")
			builder.WriteString(MDConsoleInit + "\n")
			builder.WriteString("go get -v github.com/")
			builder.WriteString(githubHandle)
			builder.WriteString("/")
			builder.WriteString(projectName)
			builder.WriteString("\n")
			builder.WriteString("```\n\n")
			builder.WriteString("Usage üíª\n")
			builder.WriteString("-------\n")
			builder.WriteString(MDConsoleInit + "\n")
			builder.WriteString(projectName)
			builder.WriteString("\n")
			builder.WriteString("```\n\n")
			builder.WriteString("Created with [xenesis](https://github.com/xenon007/xenesis)‚ù§Ô∏è")
			return builder.String()
		},
	}
}

func x07ComponentTemplate() Template {
	return Template{
		Key:         "x07-component",
		Title:       "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç X07",
		Description: "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã X07",
		MandatoryFolders: []string{
			"cmd",
			filepath.Join("internal", "components"),
			filepath.Join("internal", "config"),
			"pkg",
			"docs",
		},
		OptionalFolders: map[string]string{
			"deploy":  "–î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç—ã –¥–ª—è X07?",
			"metrics": "–°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è –º–µ—Ç—Ä–∏–∫?",
			"assets":  "–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞?",
		},
		MainFileName: func(projectName string) string {
			return filepath.Join("cmd", fmt.Sprintf("%s.go", projectName))
		},
		MainFileContent: func(projectName, modulePath string) string {
			packageName := SanitizePackageName(projectName)
			return fmt.Sprintf(`package main

import (
        "context"
        "log"

        "%s/internal/components/%s"
)

func main() {
        ctx := context.Background()

        component := %s.New()
        if err := component.Bootstrap(ctx); err != nil {
                log.Fatalf("component bootstrap failed: %v", err)
        }

        log.Println("component is up and running")
}
`, modulePath, packageName, packageName)
		},
		ExtraFiles: func(projectName, modulePath string) []File {
			packageName := SanitizePackageName(projectName)
			componentPath := filepath.Join("internal", "components", packageName, "component.go")
			configPath := filepath.Join("internal", "config", "config.go")

			return []File{
				{
					Path: componentPath,
					Content: fmt.Sprintf(`package %s

import (
        "context"
        "log"
)

type Component struct {
        // –∑–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
}

func New() *Component {
        return &Component{}
}

func (c *Component) Bootstrap(ctx context.Context) error {
        log.Println("bootstrap X07 component")
        // TODO: –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
        return nil
}
`, packageName),
				},
				{
					Path: configPath,
					Content: `package config

import "time"

type Runtime struct {
        GracefulShutdown time.Duration
}

func DefaultRuntime() Runtime {
        return Runtime{GracefulShutdown: 30 * time.Second}
}
`,
				},
			}
		},
		ReadmeContent: func(projectName, description, githubHandle string) string {
			builder := strings.Builder{}
			builder.WriteString("# –ö–æ–º–ø–æ–Ω–µ–Ω—Ç X07: ")
			builder.WriteString(projectName)
			builder.WriteString("\n")
			builder.WriteString(description)
			builder.WriteString("\n\n")
			builder.WriteString("## –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç\n")
			builder.WriteString(MDConsoleInit + "\n")
			builder.WriteString("go run ./cmd/")
			builder.WriteString(projectName)
			builder.WriteString("\n")
			builder.WriteString("```\n\n")
			builder.WriteString("## –°—Ç—Ä—É–∫—Ç—É—Ä–∞\n")
			builder.WriteString("- `internal/components/` ‚Äî –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞\n")
			builder.WriteString("- `internal/config/` ‚Äî –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n")
			builder.WriteString("- `pkg/` ‚Äî —Ä–∞–∑–¥–µ–ª—è–µ–º—ã–µ –ø–∞–∫–µ—Ç—ã\n")
			builder.WriteString("- `docs/` ‚Äî –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∏ ADR\n")
			builder.WriteString("\n–°–æ–∑–¥–∞–Ω–æ –ø—Ä–∏ –ø–æ–º–æ—â–∏ [xenesis](https://github.com/xenon007/xenesis).")
			return builder.String()
		},
	}
}

func threeXfaTemplate() Template {
	return Template{
		Key:         "3xfa-plugin",
		Title:       "–ü–ª–∞–≥–∏–Ω 3XFA",
		Description: "–ë–∞–∑–æ–≤—ã–π –∫–∞—Ä–∫–∞—Å –ø–ª–∞–≥–∏–Ω–∞ 3XFA —Å —Ç–æ—á–∫–∞–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è",
		MandatoryFolders: []string{
			"cmd",
			filepath.Join("plugins", "3xfa"),
			"internal",
			filepath.Join("internal", "adapters"),
		},
		OptionalFolders: map[string]string{
			filepath.Join("internal", "mocks"):     "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤?",
			filepath.Join("internal", "transport"): "–°–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–π —Å–ª–æ–π –¥–ª—è –ø–ª–∞–≥–∏–Ω–∞?",
		},
		MainFileName: func(projectName string) string {
			return filepath.Join("cmd", fmt.Sprintf("%s.go", projectName))
		},
		MainFileContent: func(projectName, modulePath string) string {
			return fmt.Sprintf(`package main

import (
        "log"

        _3xfa "%s/plugins/3xfa"
)

func main() {
        plugin := _3xfa.New()

        if err := plugin.Register(); err != nil {
                log.Fatalf("3XFA plugin registration failed: %v", err)
        }

        log.Println("3XFA plugin registered successfully")
}
`, modulePath)
		},
		ExtraFiles: func(projectName, modulePath string) []File {
			pluginPath := filepath.Join("plugins", "3xfa", "plugin.go")
			adapterPath := filepath.Join("internal", "adapters", "registry.go")
			return []File{
				{
					Path: pluginPath,
					Content: `package _3xfa

import "log"

type Plugin struct {
        hooks []Hook
}

type Hook interface {
        Name() string
        Execute() error
}

func New() *Plugin {
        return &Plugin{}
}

func (p *Plugin) Register() error {
        log.Println("prepare 3XFA plugin hooks")
        for _, hook := range p.hooks {
                if err := hook.Execute(); err != nil {
                        return err
                }
        }
        return nil
}

func (p *Plugin) AttachHook(h Hook) {
        p.hooks = append(p.hooks, h)
}
`,
				},
				{
					Path: adapterPath,
					Content: `package adapters

import "log"

type Registry struct {
        registered []string
}

func NewRegistry() *Registry {
        return &Registry{registered: make([]string, 0)}
}

func (r *Registry) Add(name string) {
        log.Printf("register adapter: %s", name)
        r.registered = append(r.registered, name)
}

func (r *Registry) List() []string {
        return append([]string(nil), r.registered...)
}
`,
				},
			}
		},
		ReadmeContent: func(projectName, description, githubHandle string) string {
			builder := strings.Builder{}
			builder.WriteString("# 3XFA Plugin: ")
			builder.WriteString(projectName)
			builder.WriteString("\n")
			builder.WriteString(description)
			builder.WriteString("\n\n")
			builder.WriteString("## –°–±–æ—Ä–∫–∞\n")
			builder.WriteString(MDConsoleInit + "\n")
			builder.WriteString("go build ./cmd/")
			builder.WriteString(projectName)
			builder.WriteString("\n")
			builder.WriteString("```\n\n")
			builder.WriteString("## –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ\n")
			builder.WriteString("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–∫–µ—Ç `plugins/3xfa` –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ —Å–≤–æ–∏ —Ö—É–∫–∏ —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ `AttachHook`.\n")
			builder.WriteString("\n–°–æ–∑–¥–∞–Ω–æ –ø—Ä–∏ –ø–æ–º–æ—â–∏ [xenesis](https://github.com/xenon007/xenesis).")
			return builder.String()
		},
	}
}
